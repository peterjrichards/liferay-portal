@component-name = "portal-object"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Object";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			ObjectAdmin.deleteAllCustomObjectsViaAPI();
		}
	}

	@description = "LPS-135393 - Verify that a Big Decimal entry is correctly displayed on the auto-generated table on the Custom Object Portlet"
	@priority = "4"
	test BigDecimalDisplayedOnAutoGeneratedTable {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "BigDecimal",
			fieldName = "customObjectField",
			fieldType = "BigDecimal",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject",
			value = "123.123456");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.viewEntry(entry = "123.123456");
	}

	@description = "LPS-135393 - Verify that a Boolean entry is correctly displayed on the auto-generated table on the Custom Object Portlet"
	@priority = "4"
	test BooleanDisplayedOnAutoGeneratedTable {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Boolean",
			fieldName = "customObjectField",
			fieldType = "Boolean",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject",
			value = "true");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.viewEntry(entry = "Yes");
	}

	@description = "LPS-135390 - Verify it is possible to view and access the Custom Object portlet with the Access in Control Panel permission"
	@ignore = "Test Stub"
	@priority = "4"
	test CanAccessCustomObjectWithAccessPermission {

		// TODO LPS-140525 CanAccessCustomObjectWithAccessPermission pending implementation

	}

	@description = "LPS-135396 - Verify it is possible to add a BigDecimal field on layout"
	@priority = "4"
	test CanAddBigDecimalEntryOnLayout {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "BigDecimal",
			fieldName = "customObjectField",
			fieldType = "BigDecimal",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.addSingleFieldEntryViaUI(entry = "123.123456");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.viewEntry(entry = "123.123456");
	}

	@description = "LPS-135396 - Verify it is possible to add a Boolean field on layout"
	@priority = "4"
	test CanAddBooleanEntryOnLayout {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Boolean",
			fieldName = "customObjectField",
			fieldType = "Boolean",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.addObjectBoleanFieldEntryViaUI(
			objectName = "CustomObject",
			value = "true");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.viewEntry(entry = "Yes");
	}

	@description = "LPS-135396 - Verify it is possible to add a Date field on layout"
	@priority = "4"
	test CanAddDateEntryOnLayout {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Date",
			fieldName = "customObjectField",
			fieldType = "Date",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.addSingleFieldEntryViaUI(entry = "01-01-2001");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.viewEntry(entry = "2001-01-01");
	}

	@description = "LPS-135396 - Verify it is possible to add a Double field on layout"
	@priority = "4"
	test CanAddDoubleEntryOnLayout {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Double",
			fieldName = "customObjectField",
			fieldType = "Double",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.addSingleFieldEntryViaUI(entry = "1.23");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.viewEntry(entry = "1.23");
	}

	@description = "LPS-135396 - Verify it is possible to add an entry on an object scoped by Site"
	@priority = "5"
	test CanAddEntryObjectScopedBySite {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			panelCategoryKey = "site_administration.design",
			pluralLabelName = "Custom Objects",
			scope = "site");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.addSingleFieldEntryViaUI(entry = "Test Entry");

		ObjectPortlet.viewEntry(entry = "Test Entry");
	}

	@description = "LPS-140081 - Verify it is possible to add an entry without selecting a value for a Picklist field that is not required"
	@priority = "4"
	test CanAddEntryWithoutSelectingPicklist {
		Picklist.gotoPicklists();

		Picklist.addPicklistViaUI(picklistName = "Custom Picklist");

		Picklist.gotoPicklists();

		Picklist.gotoPicklistView(picklistName = "Custom Picklist");

		Picklist.addPicklistItemViaUI(picklistItemName = "Item Test 1");

		Picklist.clickSaveButton();

		Picklist.gotoPicklists();

		Picklist.gotoPicklistView(picklistName = "Custom Picklist");

		Picklist.addPicklistItemViaUI(picklistItemName = "Item Test 2");

		Picklist.clickSaveButton();

		ObjectAdmin.openObjectAdmin();

		ObjectAdmin.addNewObject(
			fieldLabelName = "Custom Object",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.saveCustomObject();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.addObjectFieldViaUI(
			fieldLabel = "Field Picklist",
			fieldPicklist = "Custom Picklist",
			fieldType = "Picklist");

		ObjectAdmin.addObjectFieldViaUI(
			fieldLabel = "Field String",
			fieldType = "String");

		ObjectAdmin.goToDetailsTab();

		CreateObject.selectPanelCategoryKey(panelCategoryKey = "Control Panel > Object");

		CreateObject.saveObject();

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ApplicationsMenu.gotoPortlet(
			category = "Object",
			panel = "Control Panel",
			portlet = "Custom Objects");

		ObjectPortlet.addSingleFieldEntryViaUI(entry = "String Entry");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.viewEntry(entry = "String Entry");
	}

	@description = "LPS-135396 - Verify it is possible to add an Integer field on layout"
	@priority = "4"
	test CanAddIntegerEntryOnLayout {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Integer",
			fieldName = "customObjectField",
			fieldType = "Integer",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.addSingleFieldEntryViaUI(entry = "123456789");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.viewEntry(entry = "123456789");
	}

	@description = "LPS-135396 - Verify it is possible to add a Long field on layout"
	@priority = "4"
	test CanAddLongEntryOnLayout {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Long",
			fieldName = "customObjectField",
			fieldType = "Long",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.addSingleFieldEntryViaUI(entry = "12345678912345678");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.viewEntry(entry = "12345678912345678");
	}

	@description = "LPS-135390 - Verify it is possible to add an Object entry with the Add Object Entry permission"
	@ignore = "Test Stub"
	@priority = "4"
	test CanAddObjectEntryWithAddPermission {

		// TODO LPS-140527 CanAddObjectEntryWithAddPermission pending implementation

	}

	@description = "LPS-135396 - Verify it is possible to add a Picklist field on layout"
	@priority = "4"
	test CanAddPicklistEntryOnLayout {
		Picklist.gotoPicklists();

		Picklist.addPicklistViaUI(picklistName = "Custom Picklist");

		Picklist.gotoPicklists();

		Picklist.gotoPicklistView(picklistName = "Custom Picklist");

		Picklist.addPicklistItemViaUI(picklistItemName = "Item Test 1");

		Picklist.clickSaveButton();

		Picklist.gotoPicklists();

		Picklist.gotoPicklistView(picklistName = "Custom Picklist");

		Picklist.addPicklistItemViaUI(picklistItemName = "Item Test 2");

		Picklist.clickSaveButton();

		ObjectAdmin.openObjectAdmin();

		ObjectAdmin.addNewObject(
			fieldLabelName = "Custom Object",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.saveCustomObject();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.addObjectFieldViaUI(
			fieldLabel = "Field Picklist",
			fieldPicklist = "Custom Picklist",
			fieldType = "Picklist");

		ObjectAdmin.goToDetailsTab();

		CreateObject.selectPanelCategoryKey(panelCategoryKey = "Control Panel > Object");

		CreateObject.saveObject();

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ApplicationsMenu.gotoPortlet(
			category = "Object",
			panel = "Control Panel",
			portlet = "Custom Objects");

		ObjectAdmin.addObjectPicklistFieldEntryViaUI(picklistOption = "Item Test 1");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.viewEntry(entry = "itemTest1");
	}

	@description = "LPS-140084 - Verify it is possible to add special characters on a field with the Field Name as 'Name'"
	@priority = "4"
	test CanAddSpecialCharactersOnFieldNamedName {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Name",
			fieldName = "name",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.addSingleFieldEntryViaUI(entry = "@~!& ˆ%$&_-");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.viewEntry(entry = "@~!& ˆ%$&_-");
	}

	@description = "LPS-135396 - Verify it is possible to add a String field on layout"
	@priority = "5"
	test CanAddStringEntryOnLayout {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "String",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.addSingleFieldEntryViaUI(entry = "Test text");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.viewEntry(entry = "Test text");
	}

	@description = "LPS-135390 - Verify it is possible to apply a permission only to a specific site when an Object is scoped by Site"
	@ignore = "Test Stub"
	@priority = "4"
	test CanApplyPermissionOnlyToSpecificSiteWhenScopedBySite {

		// TODO LPS-140535 CanApplyPermissionOnlyToSpecificSiteWhenScopedBySite pending implementation

	}

	@description = "LPS-135396 - Verify it is possible to cancel the submition of an entry"
	@priority = "4"
	test CanCancelEntrySubmition {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectAdmin.cancelAddingObjectStringFieldEntryViaUI(entryValue = "Test Entry");

		ObjectAdmin.assertAddEntryModalIsNotPresent();

		ObjectPortlet.assertEntryNotPresent(entry = "Test Entry");
	}

	@description = "LPS-135396 - Verify it is possible to cancel the update of an entry"
	@priority = "4"
	test CanCancelEntryUpdate {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectAdmin.addObjectStringFieldEntryViaUI(entryValue = "Test Entry");

		ObjectPortlet.viewEntryDetails(entry = "Test Entry");

		ObjectAdmin.cancelUpdatingObjectStringFieldEntryViaUI(entryValue = "Test Entry 2");

		ObjectAdmin.assertUpdateEntryModalIsNotPresent(value = "Test Entry 2");

		ObjectPortlet.assertEntryNotPresent(entry = "Test Entry 2");

		ObjectPortlet.viewEntry(entry = "Test Entry");
	}

	@description = "LPS-135393 - Verify that is possible to change what columns to be displayed on the auto-generated table on the Custom Object Portlet"
	@priority = "3"
	test CanChangeColumnsToBeDisplayed {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Text",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "text",
			objectName = "CustomObject",
			value = "Test text");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.checkUncheckColumnsDisplayed(dropdowntItem = "ID");

		ObjectPortlet.assertEntryColumnNotPresent(column = "ID");
	}

	@description = "LPS-135393 - Verify that is possible to delete an entry on the auto-generated table on the Custom Object Portlet"
	@priority = "5"
	test CanDeleteEntry {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Text",
			fieldName = "text",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "text",
			objectName = "CustomObject",
			value = "Test text");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");
		ObjectPortlet.viewEntry(entry = "Test text");

		ObjectPortlet.deleteEntry(entry = "Test text");
		ObjectPortlet.assertEntryNotPresent(entry = "Test text");
	}

	@description = "LPS-135390 - Verify it is possible to delete an Object entry with the Delete permission"
	@ignore = "Test Stub"
	@priority = "4"
	test CanDeleteObjectEntryWithDeletePermission {

		// TODO LPS-140530 CanDeleteObjectEntryWithDeletePermission pending implementation

	}

	@description = "LPS-135396 - Verify it is possible to edit a BigDecimal entry on layout"
	@ignore = "Test Stub"
	@priority = "4"
	test CanEditBigDecimalEntryOnLayout {

		// TODO LPS-140539 CanEditBigDecimalEntryOnLayout pending implementation

	}

	@description = "LPS-135396 - Verify it is possible to edit a Boolean entry on layout"
	@ignore = "Test Stub"
	@priority = "4"
	test CanEditBooleanEntryOnLayout {

		// TODO LPS-140542 CanEditBooleanEntryOnLayout pending implementation

	}

	@description = "LPS-135396 - Verify it is possible to edit a Date entry on layout"
	@ignore = "Test Stub"
	@priority = "4"
	test CanEditDateEntryOnLayout {

		// TODO LPS-140545 CanEditDateEntryOnLayout pending implementation

	}

	@description = "LPS-135396 - Verify it is possible to edit a Double entry on layout"
	@ignore = "Test Stub"
	@priority = "4"
	test CanEditDoubleEntryOnLayout {

		// TODO LPS-140548 CanEditDoubleEntryOnLayout pending implementation

	}

	@description = "LPS-135396 - Verify it is possible to edit a Integer entry on layout"
	@ignore = "Test Stub"
	@priority = "4"
	test CanEditIntegerEntryOnLayout {

		// TODO LPS-140551 CanEditIntegerEntryOnLayout pending implementation

	}

	@description = "LPS-135396 - Verify it is possible to edit a Long entry on layout"
	@ignore = "Test Stub"
	@priority = "4"
	test CanEditLongEntryOnLayout {

		// TODO LPS-140554 CanEditLongEntryOnLayout pending implementation

	}

	@description = "LPS-135396 - Verify it is possible to edit a Picklist entry on layout"
	@ignore = "Test Stub"
	@priority = "4"
	test CanEditPicklistEntryOnLayout {

		// TODO LPS-140560 CanEditPicklistEntryOnLayout pending implementation

	}

	@description = "LPS-135396 - Verify it is possible to edit a String entry on layout"
	@ignore = "Test Stub"
	@priority = "5"
	test CanEditStringEntryOnLayout {
		property portal.acceptance = "true";

		// TODO LPS-140557 CanEditStringEntryOnLayout pending implementation

	}

	@description = "LPS-135390 - Verify it is not possible to view and access the Custom Object portlet without the Access in Control Panel permission"
	@ignore = "Test Stub"
	@priority = "5"
	test CannotAccessCustomObjectWithoutAccessPermission {
		property portal.acceptance = "true";

		// TODO LPS-140524 CannotAccessCustomObjectWithoutAccessPermission pending implementation

	}

	@description = "LPS-135390 - Verify it is not possible to add an Object entry without the Add Object Entry permission"
	@ignore = "Test Stub"
	@priority = "5"
	test CannotAddObjectEntryWithoutAddPermission {
		property portal.acceptance = "true";

		// TODO LPS-140526 CannotAddObjectEntryWithoutAddPermission pending implementation

	}

	@description = "LPS-135390 - Verify it is not possible to delete an Object entry without the Delete permission"
	@ignore = "Test Stub"
	@priority = "4"
	test CannotDeleteObjectEntryWithoutDeletePermission {

		// TODO LPS-140529 CannotDeleteObjectEntryWithoutDeletePermission pending implementation

	}

	@description = "LPS-135390 - Verify it is not possible to update an Object entry without the Update permission"
	@ignore = "Test Stub"
	@priority = "4"
	test CannotUpdateObjectEntryWithoutUpdatePermission {

		// TODO LPS-140531 CannotUpdateObjectEntryWithoutUpdatePermission pending implementation

	}

	@description = "LPS-135390 - Verify it is not possible to view other user's Object entry with only the Add Object Entry permission"
	@ignore = "Test Stub"
	@priority = "5"
	test CannotViewOtherUsersEntryWithOnlyAddPermission {
		property portal.acceptance = "true";

		// TODO LPS-140528 CannotViewOtherUsersEntryWithOnlyAddPermission pending implementation

	}

	@description = "LPS-135390 - Verify it is not possible to view other user's Object entry without the View permission"
	@ignore = "Test Stub"
	@priority = "4"
	test CannotViewOtherUsersEntryWithoutViewPermission {

		// TODO LPS-140533 CannotViewOtherUsersEntryWithoutViewPermission pending implementation

	}

	@description = "LPS-135393 - Verify that is possible to order the auto-generated table by an entry on the Custom Object Portlet"
	@priority = "3"
	test CanOrderTable {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Text",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		for (var number : list "1,2") {
			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField",
				objectName = "CustomObject",
				value = "Test text ${number}");
		}

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.sortField(sortFieldName = "Text");

		ObjectPortlet.assertFilterResultsSpecificOrder(entry = "Test text 1,Test text 2");

		ObjectPortlet.sortField(sortFieldName = "Text");

		ObjectPortlet.assertFilterResultsSpecificOrder(entry = "Test text 2,Test text 1");
	}

	@description = "LPS-135393 - Verify that is possible to search for an entry on the auto-generated table on the Custom Object Portlet"
	@priority = "5"
	test CanSeachEntry {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Text",
			fieldName = "text",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "text",
			objectName = "CustomObject",
			value = "Test 1");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "text",
			objectName = "CustomObject",
			value = "Entry 2");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.searchEntry(entryName = "Entry 2");

		ObjectPortlet.viewEntry(entry = "Entry 2");

		ObjectPortlet.assertEntryNotPresent(entry = "Test 1");
	}

	@description = "LPS-135393 - Verify that is possible to search for a field on the dropdown to select the columns to be displayed on the auto-generated table on the Custom Object Portlet"
	@priority = "3"
	test CanSearchForFieldOnDropdownToSelectColumns {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "text",
			objectName = "CustomObject",
			value = "Test text");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.searchColumn(columnName = "Field");

		ObjectPortlet.assertMenuItemColumn(dropdowntItem = "Field");
	}

	@description = "LPS-140082 - Verify it is possible to search for a partial Object entry on the Relationship field"
	@priority = "4"
	test CanSearchPartialOnRelationshipField {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.addObjectRelationshipViaAPI(
			objectName_1 = "CustomObject",
			objectName_2 = "CustomObject",
			relationshipLabel = "Relationship",
			relationshipName = "relationship",
			relationshipType = "oneToMany");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		CreateObject.selectTitleField(fieldLabel = "Field");

		CreateObject.saveObject();

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject",
			value = "Test 1");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject",
			value = "Test 2");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.viewEntryDetails(entry = "Test 1");

		ObjectPortlet.searchEntryRelationshipField(entryValue = "Tes");

		ObjectPortlet.assertRelationshipEntrySearchResultsPresent(entry = "t 2");
	}

	@description = "LPS-135390 - Verify it is possible to update an Object entry with the Update permission"
	@ignore = "Test Stub"
	@priority = "4"
	test CanUpdateObjectEntryWithUpdatePermission {

		// TODO LPS-140532 CanUpdateObjectEntryWithUpdatePermission pending implementation

	}

	@description = "LPS-138755 - Add an entry with another user and make sure the author value is correctly displayed"
	@ignore = "Test Stub"
	@priority = "5"
	test CanViewAnotherUserNameOnAuthorColumn {
		property portal.acceptance = "true";

		// TODO LPS-140536 CanViewAnotherUserNameOnAuthorColumn pending implementation

	}

	@description = "LPS-135396 - Verify it is possible to view a BigDecimal entry and label on layout"
	@priority = "4"
	test CanViewBigDecimalEntryOnLayout {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Field",
			fieldName = "customObjectField",
			fieldType = "BigDecimal",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject",
			value = "123.123456");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.viewEntryDetails(entry = "123.123456");

		ObjectPortlet.assertEntryDetailsLabelPresent(entryLabel = "Field");

		ObjectPortlet.assertEntryDetailsValuePresent(entryValue = "123.123456");
	}

	@description = "LPS-135396 - Verify it is possible to view a Boolean entry and label on layout"
	@priority = "4"
	test CanViewBooleanEntryOnLayout {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Field",
			fieldName = "customObjectField",
			fieldType = "Boolean",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject",
			value = "true");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.viewEntryDetails(entry = "Yes");

		ObjectPortlet.assertEntryDetailsLabelPresent(entryLabel = "Field");

		ObjectPortlet.assertEntryDetailsCheckedPresent();
	}

	@description = "LPS-135396 - Verify it is possible to view a Date entry and label on layout"
	@priority = "4"
	test CanViewDateEntryOnLayout {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Field",
			fieldName = "customObjectField",
			fieldType = "Date",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject",
			value = "01-01-2001");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.viewEntryDetails(entry = "01-01-2001");

		ObjectPortlet.assertEntryDetailsLabelPresent(entryLabel = "Field");

		ObjectPortlet.assertEntryDetailsValuePresent(entryValue = "01-01-2001");
	}

	@description = "LPS-135396 - Verify it is possible to view a Double entry and label on layout"
	@priority = "4"
	test CanViewDoubleEntryOnLayout {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Field",
			fieldName = "customObjectField",
			fieldType = "Double",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject",
			value = "1.54");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.viewEntryDetails(entry = "1.54");

		ObjectPortlet.assertEntryDetailsLabelPresent(entryLabel = "Field");

		ObjectPortlet.assertEntryDetailsValuePresent(entryValue = "1.54");
	}

	@description = "LPS-135396 - Verify it is possible to view an Integer entry and label on layout"
	@priority = "4"
	test CanViewIntegerEntryOnLayout {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Field",
			fieldName = "customObjectField",
			fieldType = "Integer",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject",
			value = "12345");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.viewEntryDetails(entry = "12345");

		ObjectPortlet.assertEntryDetailsLabelPresent(entryLabel = "Field");

		ObjectPortlet.assertEntryDetailsValuePresent(entryValue = "12345");
	}

	@description = "LPS-135396 - Verify it is possible to view a Long entry and label on layout"
	@priority = "4"
	test CanViewLongEntryOnLayout {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Field",
			fieldName = "customObjectField",
			fieldType = "Long",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject",
			value = "12345678");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.viewEntryDetails(entry = "12345678");

		ObjectPortlet.assertEntryDetailsLabelPresent(entryLabel = "Field");

		ObjectPortlet.assertEntryDetailsValuePresent(entryValue = "12345678");
	}

	@description = "LPS-135390 - Verify it is possible to view other user's Object entry with the View permission"
	@ignore = "Test Stub"
	@priority = "4"
	test CanViewOtherUsersEntryWithViewPermission {

		// TODO LPS-140534 CanViewOtherUsersEntryWithViewPermission pending implementation

	}

	@description = "LPS-135396 - Verify it is possible to view a Picklist entry and label on layout"
	@ignore = "Test Stub"
	@priority = "4"
	test CanViewPicklistEntryOnLayout {

		// TODO LPS-140559 CanViewPicklistEntryOnLayout pending implementation

	}

	@description = "LPS-135396 - Verify it is possible to view a String entry and label on layout"
	@priority = "5"
	test CanViewStringEntryOnLayout {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject",
			value = "Text Test");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.viewEntryDetails(entry = "Text Test");

		ObjectPortlet.assertEntryDetailsLabelPresent(entryLabel = "Field");

		ObjectPortlet.assertEntryDetailsValuePresent(entryValue = "Text Test");
	}

	@description = "LPS-135393 - Verify that the columns ID, Field(s) and Workflow Status are displayed"
	@priority = "5"
	test ColumnsAreDisplayed {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject",
			value = "String");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.assertGenericEntryColumnIsDisplayed(fieldLabelName = "ID");

		ObjectPortlet.assertFieldEntryColumnIsDisplayed(fieldLabelName = "Field");

		ObjectPortlet.assertGenericEntryColumnIsDisplayed(fieldLabelName = "Status");
	}

	@description = "LPS-135393 - Verify that a Date entry is correctly displayed on the auto-generated table on the Custom Object Portlet"
	@priority = "4"
	test DateDisplayedOnAutoGeneratedTable {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Date",
			fieldName = "customObjectField",
			fieldType = "Date",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject",
			value = "2021-09-23");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.viewEntry(entry = "2021-09-23");
	}

	@description = "LPS-135393 - Verify that a Double entry is correctly displayed on the auto-generated table on the Custom Object Portlet"
	@priority = "4"
	test DoubleDisplayedOnAutoGeneratedTable {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Double",
			fieldName = "customObjectField",
			fieldType = "Double",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject",
			value = "1.54");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.viewEntry(entry = "1.54");
	}

	@description = "LPS-138745 - Verify that duplicated entry is not submitted when refreshing the Object portlet"
	@priority = "4"
	test DuplicatedEntryNotSubmittedWhenRefreshingPage {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.addSingleFieldEntryViaUI(entry = "Test Entry");

		Refresh();

		ObjectPortlet.assertDuplicatedEntryNotPresent(entry = "Test Entry");
	}

	@description = "LPS-135393 - Verify the empty state when searching for a value that does not exist on the auto-generated table on the Custom Object Portlet"
	@priority = "3"
	test EmptyStateDisplayedForSearch {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "text",
			objectName = "CustomObject",
			value = "Test text");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.searchEntry(entryName = "Lorem ipsum");

		AssertTextEquals(
			locator1 = "Message#EMPTY_INFO",
			value1 = "No items were found.");
	}

	@description = "LPS-135393 - Verify the empty state when searching for a value that does not exist on the dropdown to select the columns to be displayed on the auto-generated table on the Custom Object Portlet"
	@priority = "3"
	test EmptyStateDisplayedForSearchOnDropdownToSelectColumns {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "text",
			objectName = "CustomObject",
			value = "Test text");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.searchColumn(columnName = "test");

		ObjectPortlet.assertNoFieldsWereFound();
	}

	@description = "LPS-135393 - Verify if the empty state is displayed when there is no entry on the Custom Object Portlet"
	@priority = "4"
	test EmptyStateIsDisplayedWhenNoEntry {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		AssertTextEquals(
			locator1 = "Message#EMPTY_INFO",
			value1 = "No items were found.");
	}

	@description = "LPS-135393 - Verify that an Integer entry is correctly displayed on the auto-generated table on the Custom Object Portlet"
	@priority = "4"
	test IntegerDisplayedOnAutoGeneratedTable {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Integer",
			fieldName = "customObjectField",
			fieldType = "Integer",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject",
			value = "123456789");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.viewEntry(entry = "123456789");
	}

	@description = "LPS-135393 - Verify that a Long entry is correctly displayed on the auto-generated table on the Custom Object Portlet"
	@priority = "4"
	test LongDisplayedOnAutoGeneratedTable {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Long",
			fieldName = "customObjectField",
			fieldType = "Long",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject",
			value = "12345678912345678");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.viewEntry(entry = "12345678912345678");
	}

	@description = "LPS-135393 - Verify that a String entry is correctly displayed on the auto-generated table on the Custom Object Portlet"
	@priority = "5"
	test StringDisplayedOnAutoGeneratedTable {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Text",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject",
			value = "Test text Test text Test text Test text Test text Test text Test text  Test");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.viewEntry(entry = "Test text Test text Test text Test text Test text Test text Test text  Test");
	}

	@description = "LPS-135393 - Verify the table is updated when changing a page on the Custom Object Portlet"
	@priority = "3"
	test TableUpdatedWhenChangingPage {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Text",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		for (var number : list "1,2,3,4,5") {
			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField",
				objectName = "CustomObject",
				value = "Test text ${number}");
		}

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.changePagination(itemsPerPage = "4 items");

		ObjectPortlet.checkAnyPage(pageNumber = "2");

		ObjectPortlet.viewEntry(entry = "Test text 5");

		ObjectPortlet.assertEntryNotPresent(entry = "Test text 1");

		ObjectPortlet.assertEntryNotPresent(entry = "Test text 2");

		ObjectPortlet.assertEntryNotPresent(entry = "Test text 3");

		ObjectPortlet.assertEntryNotPresent(entry = "Test text 4");
	}

	@description = "LPS-135393 - Verify the table is updated when changing the pagination number on the Custom Object Portlet"
	@priority = "3"
	test TableUpdatedWhenChangingPaginationNumber {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Text",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		for (var number : list "1,2,3,4,5,6,7,8") {
			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField",
				objectName = "CustomObject",
				value = "Test text ${number}");
		}

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.changePagination(itemsPerPage = "4 items");

		ObjectPortlet.viewEntry(entry = "Test text 1");
		ObjectPortlet.viewEntry(entry = "Test text 2");
		ObjectPortlet.viewEntry(entry = "Test text 3");
		ObjectPortlet.viewEntry(entry = "Test text 4");
		ObjectPortlet.assertEntryNotPresent(entry = "Test text 5");
		ObjectPortlet.assertEntryNotPresent(entry = "Test text 6");
		ObjectPortlet.assertEntryNotPresent(entry = "Test text 7");
		ObjectPortlet.assertEntryNotPresent(entry = "Test text 8");
	}

}